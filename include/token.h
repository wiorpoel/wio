#ifndef WIO_TOKEN_H
#define WIO_TOKEN_H


typedef enum TOKEN_TYPE {

    TOKEN_DATA_TYPE_CHAR = 100,
    TOKEN_DATA_TYPE_SHORT,
    TOKEN_DATA_TYPE_INT,
    TOKEN_DATA_TYPE_LONG,
    TOKEN_DATA_TYPE_FLOAT,
    TOKEN_DATA_TYPE_DOUBLE,
    TOKEN_DATA_TYPE_UNSIGNED,
    TOKEN_DATA_TYPE_SIGNED,
    TOKEN_DATA_TYPE_STRING,
    TOKEN_DATA_TYPE_UNI,
    TOKEN_DATA_TYPE_LIST,
    TOKEN_DATA_TYPE_ARRAY,
    TOKEN_DATA_TYPE_DICT,
    TOKEN_DATA_TYPE_JSON,
    TOKEN_DATA_TYPE_STRUCT,
    TOKEN_DATA_TYPE_CLASS,
    TOKEN_DATA_TYPE_ENUM,
    TOKEN_DATA_TYPE_MACRO,
    TOKEN_DATA_TYPE_UNSIGNED_CHAR,
    TOKEN_DATA_TYPE_SIGNED_CHAR,
    TOKEN_DATA_TYPE_UNSIGNED_SHORT,
    TOKEN_DATA_TYPE_SIGNED_SHORT,
    TOKEN_DATA_TYPE_UNSIGNED_INT,
    TOKEN_DATA_TYPE_SIGNED_INT,
    TOKEN_DATA_TYPE_UNSIGNED_LONG,
    TOKEN_DATA_TYPE_SIGNED_LONG,
    TOKEN_DATA_TYPE_LONG_DOUBLE,

    TOKEN_IDENTIFIER_TYPE_VARIABLE_NAME = 200,
    TOKEN_IDENTIFIER_TYPE_FUNCTION_NAME,
    TOKEN_IDENTIFIER_TYPE_STRUCT_NAME,
    TOKEN_IDENTIFIER_TYPE_CLASS_NAME,
    TOKEN_IDENTIFIER_TYPE_ENUM_NAME,
    TOKEN_IDENTIFIER_TYPE_MACRO_NAME,

    TOKEN_SYMBOL_DATA_LPAREN = 300,
    TOKEN_SYMBOL_DATA_RPAREN,
    TOKEN_SYMBOL_DATA_LBRACK,
    TOKEN_SYMBOL_DATA_RBRACK,
    TOKEN_SYMBOL_DATA_LCURL,
    TOKEN_SYMBOL_DATA_RCURL,
    TOKEN_SYMBOL_DATA_COLON,
    TOKEN_SYMBOL_DATA_COMMA,
    TOKEN_SYMBOL_DATA_DOT,
    TOKEN_SYMBOL_DATA_QUESTION,

    TOKEN_OPERATOR_TYPE_ADD = 400,
    TOKEN_OPERATOR_TYPE_SUB,
    TOKEN_OPERATOR_TYPE_MUL,
    TOKEN_OPERATOR_TYPE_DIV,
    TOKEN_OPERATOR_TYPE_MOD,
    TOKEN_OPERATOR_TYPE_POW,

    TOKEN_ASSIGNMENT_TYPE_EQ = 500,
    TOKEN_ASSIGNMENT_TYPE_ADD_EQ,
    TOKEN_ASSIGNMENT_TYPE_SUB_EQ,
    TOKEN_ASSIGNMENT_TYPE_MUL_EQ,
    TOKEN_ASSIGNMENT_TYPE_DIV_EQ,
    TOKEN_ASSIGNMENT_TYPE_MOD_EQ,
    TOKEN_ASSIGNMENT_TYPE_POW_EQ,

    TOKEN_COMPARISON_TYPE_LTHAN = 600,
    TOKEN_COMPARISON_TYPE_GTHAN,
    TOKEN_COMPARISON_TYPE_EQ,
    TOKEN_COMPARISON_TYPE_LTHAN_EQ,
    TOKEN_COMPARISON_TYPE_GTHAN_EQ,

    TOKEN_CONDITION_TYPE_OR = 700,
    TOKEN_CONDITION_TYPE_AND,
    TOKEN_CONDITION_TYPE_NOT,

    TOKEN_KEYWORD_TYPE_IF = 800,
    TOKEN_KEYWORD_TYPE_ELIF,
    TOKEN_KEYWORD_TYPE_ELSE,
    TOKEN_KEYWORD_TYPE_FOR,
    TOKEN_KEYWORD_TYPE_WHILE,
    TOKEN_KEYWORD_TYPE_DO,
    TOKEN_KEYWORD_TYPE_IMPORT,
    TOKEN_KEYWORD_TYPE_FROM,
    TOKEN_KEYWORD_TYPE_WEB,
    TOKEN_KEYWORD_TYPE_LOCAL,
    TOKEN_KEYWORD_TYPE_CACHE,
    TOKEN_KEYWORD_TYPE_PUBLIC,
    TOKEN_KEYWORD_TYPE_PRIVATE,
    TOKEN_KEYWORD_TYPE_PROTECT,

    TOKEN_ESCAPE_TYPE_TAB = 900,
    TOKEN_ESCAPE_TYPE_NEWLINE,
    TOKEN_ESCAPE_TYPE_NULL,

    TOKEN_SPECIAL_TYPE_EOF = 1000
} TokenType;


typedef struct TOKEN {

    TokenType type;
    const char * value;
    unsigned int line;
    unsigned int index;
    unsigned char length;
} Token;


Token * token_init(TokenType type, const char * value, unsigned int line, unsigned int index, unsigned char length);


#endif